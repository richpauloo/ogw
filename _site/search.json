{
  "articles": [
    {
      "path": "certification.html",
      "title": "OGW certification",
      "description": "Get ahead of the curve\n",
      "author": [],
      "contents": "\n\nContents\nWhat is OGW certification?\nWhy certify?\n\nWhat is OGW certification?\nOGW certification means that a groundwater elevation database adheres to the OGW data schema and has been certified by our automated, online certification system. Certification only takes a few minutes, and is as easy as uploading a sample of your data and downloading a certificate.\n<gif of a online screen capture showing a user dropping data into a Shiny App, obtaining a success message, and downloading the certificate>\nWhy certify?\nOnce your data has been certified you can be assured it is:\n Interoperable between basins Compliant with DWR annual reporting Eligible for forthcoming streamlined reporting to DWR\n\n\n\n",
      "last_modified": "2021-03-02T14:07:50-08:00"
    },
    {
      "path": "data-schema.html",
      "title": "Data schema",
      "description": "OGW data schema is informed by the DWR's periodic groundwater level database",
      "author": [],
      "contents": "\n\nContents\nWhat is a data schema?\nmeasurements\nstations\nwell_perforations\n\nGetting started\nSQL setup\nPython setup\nR setup\n\n\nWhat is a data schema?\nA data schema is a rulebook for how databases store information, and a common language to ensure that data collected by different parties is standardized. The OGW data schema ensures interoperability if and when data is exchanged, and enforces rules for incoming data that can prevent “bad” data from sneaking in. OGW seamlesslty integrates fragmented data collection efforts across basin boundaries.\nThe OGW schema, based on the DWR Periodic Groundwater Level Measurement database relates three tables that join on the “ID” column, which designates the ID of a monitoring well. The three tables are:\nmeasurements: groundwater level information\nstations: monitoring well locations\nwell_perforations: well construction information\nmeasurements\n\n\nVariable\n\n\nData Type\n\n\nNullable\n\n\nDescription\n\n\nID\n\n\nTEXT\n\n\nNOT NULL\n\n\nMonitoring well ID\n\n\nTIMESTAMP\n\n\nDATE\n\n\nNOT NULL\n\n\nSample date and time\n\n\nGWL_FT\n\n\nFLOAT8\n\n\nNOT NULL\n\n\nGroundwater elevation in ft AMSL\n\n\nstations\n\n\nVariable\n\n\nData Type\n\n\nNullable\n\n\nDescription\n\n\nID\n\n\nTEXT\n\n\nNOT NULL\n\n\nMonitoring well ID\n\n\nLNG_WGS84\n\n\nDECIMAL(9,6)\n\n\nNOT NULL\n\n\nMonitoring well longitude in WGS84\n\n\nLAT_WGS84\n\n\nDECIMAL(9,6)\n\n\nNOT NULL\n\n\nMonitoring well latitude in WGS84\n\n\nELEV_FT\n\n\nFLOAT8\n\n\nNOT NULL\n\n\nMonitoring well elevation in ft AMSL\n\n\nwell_perforations\n\n\nVariable\n\n\nData Type\n\n\nNullable\n\n\nDescription\n\n\nID\n\n\nTEXT\n\n\nNOT NULL\n\n\nMonitoring well ID\n\n\nTOP_FT\n\n\nFLOAT8\n\n\nNOT NULL\n\n\nTop of perforated interval in ft below land surface\n\n\nBOT_FT\n\n\nFLOAT8\n\n\nNOT NULL\n\n\nBottom of perforated interval in ft below land surface\n\n\nTCD_FT\n\n\nFLOAT8\n\n\nNOT NULL\n\n\nTotal completed depth in ft below land surface\n\n\nGetting started\nThe most up-to-date version of OGW’s data schema can be downloaded from the OGW Github page. SQL, Python, and R data schema setup are provided below for an example Postgres database.\nSQL setup\nCREATE TABLE gsp.measurements (\n    ID        TEXT         NOT NULL,\n    TIMESTAMP DATE         NOT NULL,\n    GWL_FT    FLOAT8       NOT NULL,\n    ELEV_FT   FLOAT8       NOT NULL\n);\n\nCREATE TABLE gsp.stations (\n    ID        TEXT         NOT NULL,\n    LNG_WGS84 DECIMAL(9,6) NOT NULL,\n    LAT_WGS84 DECIMAL(9,6) NOT NULL\n);\n\nCREATE TABLE gsp.well_perforations (\n    ID        TEXT         NOT NULL,\n    TOP_FT    FLOAT8       NULL,\n    BOT_FT    FLOAT8       NULL,\n    TCD_FT    FLOAT8       NOT NULL\n);\nPython setup\n# Import relevant libraries \nimport sqlalchemy as sa\nimport os\n\n# Set database parameters\nhost     = \"host_name\"\ndatabase = \"database_name\"\nusername = \"user\"\npassword = \"password\"\nport     = 1234\n\n# Connection string\nconn_string = f\"postgresql://{username}:{password}@{host}:{port}/{database}\"\n\n# Connect to database\nengine = sa.create_engine(conn_string)\nconn   = engine.connect()\n\n# Create \"gsp\" schema\n\nconn.execute(\"\"\"\n    CREATE SCHEMA IF NOT EXISTS gsp;\n\"\"\")\n\n\n# Create \"measurements\" table\ntry:\n    conn.execute(\"\"\"\n        DROP TABLE IF EXISTS measurements CASCADE;\n        CREATE TABLE gsp.measurements (\n            ID        TEXT   NOT NULL,\n            TIMESTAMP DATE   NOT NULL,\n            GWL_FT    FLOAT8 NOT NULL,\n            ELEV_FT   FLOAT8 NOT NULL\n        );\n        \"\"\")\n\n    print(\"Table 'measurements' created successfully in PostgreSQL \")\n    \nexcept Exception as error:\n    print (\"Error while creating PostgreSQL table\", error)\n\n\n# Create \"gsp.stations\" table\ntry:\n    conn.execute(\"\"\"\n        DROP TABLE IF EXISTS gsp.stations CASCADE;\n        CREATE TABLE gsp.stations ( \n            ID        TEXT         NOT NULL,\n            LNG_WGS84 DECIMAL(9,6) NOT NULL,\n            LAT_WGS84 DECIMAL(9,6) NOT NULL\n        );\n\"\"\")\n    print(\"Table 'stations' created successfully in PostgreSQL \")\n    \nexcept Exception as error:\n    print (\"Error while creating PostgreSQL table\", error)\n    \n    \n# Create \"gsp.well_perforations\" table\ntry:\n    conn.execute(\"\"\"\n        DROP TABLE IF EXISTS gsp.well_perforations CASCADE;\n        CREATE TABLE gsp.well_perforations ( \n             ID        TEXT         NOT NULL,\n             TOP_FT    FLOAT8       NULL,\n             BOT_FT    FLOAT8       NULL,\n             TCD_FT    FLOAT8       NOT NULL\n        );\n\"\"\")\n    print(\"Table 'well_perforations' created successfully in PostgreSQL \")\n    \nexcept Exception as error:\n    print (\"Error while creating PostgreSQL table\", error)\nR setup\nr_code_goes <- here()\n\n\n\n",
      "last_modified": "2021-03-02T14:07:51-08:00"
    },
    {
      "path": "index.html",
      "title": "Open Groundwater (OGW)",
      "description": "A shared schema for groundwater elevation data interoperability and streamlining\n",
      "author": [],
      "contents": "\n\nContents\nWhy OGW?\n\nWhy OGW?\nEvery day, groundwater data is collected for monitoring, modeling, and reporting requirements. Groundwater sustainability plan (GSP) development in California has led to fragmented and non-standard representations of these critical data.\nOpen Groundwater (OGW) is an open source data schema free for use that enables:\n Interbasin data interoperability DWR annual reporting compliance IoT sensor networks & automated reporting\nOGW Certification designates a database that adheres to the OGW data schema, and may be verified for a database free of charge.\n\n\n\n",
      "last_modified": "2021-03-02T14:07:53-08:00"
    },
    {
      "path": "interbasin.html",
      "title": "Interbasin data interoperability",
      "description": "A shared schema steamlines interbasin data sharing \n",
      "author": [],
      "contents": "\n\nContents\nWhat is data interoperability?\nOGW data interoperability in the wild\n\nWhat is data interoperability?\nGroundwater doesn’t care where one GSP plan boundary ends and another begins. Two adjacent basins with OGW certification can seamlessly integrate their groundwater data without ever re-inventing a pre- or post-processing script or workflow.\n\nOGW data interoperability in the wild\nhighlight two basins that share data and are both OGW certified\n\n\n\n",
      "last_modified": "2021-03-02T14:07:53-08:00"
    },
    {
      "path": "iot.html",
      "title": "IoT sensor networks & automated reporting",
      "description": "The future of groundwater monitoring, today\n",
      "author": [],
      "contents": "\n\nContents\nWhat is an IoT sensor network?\nTelemetry\nSensors\n\n\nWhat is an IoT sensor network?\nInternet of Things (IoT) sensor technology is ubiquitous, and connects “things” to the internet, for example, cars, homes, water meters, porch cameras, and thermostats. Similarly, groundwater level IoT sensors powered by solar energy are deployed year-round in monitoring wells, and use cellphone towers to send data to a database, which are then available for analysis, visualization, and critical decision-making. Groundwater elevation sampling is possible at unprecedented temporal scales (minutes), all without ever needing to leave the office.\nOGW certified IoT sensors collect and store data in the OGW data schema.\nconceptual model\nTelemetry\nTelemetry units consist of…\n\n\nSensors\nGroundwater sensors are submerged in a monitoring well and measure the pressure above them. Pressure is converted to a water column height and relayed to the telemetry unit.\n\n\n\n",
      "last_modified": "2021-03-02T14:07:55-08:00"
    },
    {
      "path": "reporting.html",
      "title": "DWR annual reporting compliance",
      "description": "OGW certified data is ready to submit to DWR\n",
      "author": [],
      "contents": "\n\nContents\nCreated with compliance in mind\n\nCreated with compliance in mind\nThe OGW data schema is based on DWR’s data schema for the Periodic Groundwater Level Database. The OGW data team coordinates directly with DWR to ensure that the OGW data schema is submission-ready for annual reporting.\nneed to brainstorm how to illustrate this and what else to put here\n\n\n\n",
      "last_modified": "2021-03-02T14:07:55-08:00"
    },
    {
      "path": "use-cases.html",
      "title": "Open Groundwater (OGW)",
      "description": "A shared schema for groundwater elevation data interoperability\n",
      "author": [],
      "contents": "\n\nContents\nProblem statement\n\nProblem statement\nEvery day, groundwater data is collected for monitoring, modeling, and reporting requirements. Groundwater sustainability plan (GSP) development has led to fragmented and non-standard representations of these critical data.\nOpen Groundwater (OGW) certification is is an open source data schema free for use that ensures:\n\n\n\n\n",
      "last_modified": "2021-03-02T14:07:55-08:00"
    }
  ],
  "collections": []
}
